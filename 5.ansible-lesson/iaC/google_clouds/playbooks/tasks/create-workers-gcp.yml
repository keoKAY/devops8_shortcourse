# we should have a task in order to wait for the ssh connection of master01 to be ready before running the other tasks  ( use module called wait_for )
- name: Check if publick key exist 
  stat:
    path: "{{ ssh_pubkey_path }}"
  register: ssh_pubkey_stat
- name: Generate ssh key pair there is no pub key 
  shell: |
    ssh-keygen -t rsa -b 4096 -f /home/keo/.ssh/id_rsa -N ''
  become_user: keo
  when: ssh_pubkey_stat.stat.exists == False
- name: Slurp pub key from local machine 
  slurp: 
    src: "{{ ssh_pubkey_path }}"
  register: ssh_pubkey
- name: Perform apt update 
  apt: 
    update_cache: yes
- name: Install pip installer first 
  apt: 
    name: python3-pip
    state: present
- name: Ensure that the package are installed 
  pip: 
    name: 
      - requests
      - google-auth
  when: true
- name: Copy Service Account file to tmp 
  copy: 
    src: "{{ service_account_path }}"
    dest: "/tmp/serviceaccount.json"
- name: Create GCP workers instances
  google.cloud.gcp_compute_instance:
    name: "{{ item.name }}"
    machine_type: "{{ item.machine_type }}"
    zone: "{{ item.zone }}"
    project: "{{google_project_id}}"
    auth_kind: "serviceaccount"
    service_account_file: "/tmp/serviceaccount.json"
    state: present # absent -> delete instance 
    metadata:
      ssh-keys: "keo:{{ ssh_pubkey['content'] | b64decode }}"

    disks:
      - auto_delete: true
        boot: true
        initialize_params:
          source_image: "{{ item.image }}"
          disk_size_gb: "{{ item.disk_size }}"
          disk_type: "{{ item.disk_type }}"
    network_interfaces:
      - network:
          selfLink: "projects/{{google_project_id}}/global/networks/default"
        access_configs:
          - name: External NAT
            type: ONE_TO_ONE_NAT
    tags:
      items:
        - http-server
        - https-server
  loop: "{{ machines_info }}"
  register: gcp_workers_instances
  # when: false 
  when: 
    - item.name != "master01"
- name: Delete serviceaccount json file 
  file: 
    path: "/tmp/serviceaccount.json"
    state: absent
  # become: true 
- name: Register the existing inventory file 
  local_action:
    module: slurp 
    src: "{{ playbook_dir }}/../inventory.ini"
  register: existing_inventory
  become: false 
- name: Update our inventory 
  local_action: 
    module: template 
    src: "{{ playbook_dir }}/templates/workers-inventory.j2"
    dest: "{{ playbook_dir }}/../inventory.ini"
  become: false
  vars:
    existing_content: "{{ existing_inventory['content'] | b64decode }}"