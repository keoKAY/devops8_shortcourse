- name: Show Debug Google Instance
  debug:
    msg: "This is working fine "
  when: false
# - name: Create GCP instance
#   google.cloud.gcp_compute_instance:
#     auth_kind: "serviceaccount"
#     service_account_file: "{{ service_account_path }}"
#     project: "{{ google_project_id }}"
#     zone: us-central1-a
#     name: ansible-instance
#     machine_type: e2-medium
#     disks:
#       - auto_delete: true
#         boot: true
#         initialize_params:
#           source_image: projects/debian-cloud/global/images/family/debian-11
#           disk_size_gb: 20
#     network_interfaces:
#       - network:
#           selfLink: default
#         access_configs:
#           - name: External NAT
#             type: ONE_TO_ONE_NAT
#   register: instance_creation
# - name: Display instance details
#   debug:
#     debug: instance_creation
- name: Slurp pub key from local machine
  slurp:
    src: "{{ ssh_pubkey_path }}"
  register: ssh_pubkey
# - name: This is the name of ansible user
#   debug:
#     msg: "Current user is : {{ ansible_user }}"
- name: Ensure the package are installed
  pip:
    name:
      - requests
      - google-auth
- name: Create GCP instance
  google.cloud.gcp_compute_instance:
    name: "my-instance"
    machine_type: "e2-medium"
    zone: "us-central1-a"
    project: "{{google_project_id}}"
    auth_kind: "serviceaccount"
    service_account_file: "{{ service_account_path }}"
    state: present
    metadata:
      ssh-keys: "keo:{{ ssh_pubkey['content'] | b64decode }}"
      startup-script: |
        #!/bin/bash 
        sudo apt update 
        sudo apt install nginx -y
    disks:
      - auto_delete: true
        boot: true
        initialize_params:
          source_image: "projects/ubuntu-os-cloud/global/images/family/ubuntu-2004-lts"
          disk_size_gb: 20
          disk_type: "pd-standard"
    network_interfaces:
      - network:
          selfLink: "projects/{{google_project_id}}/global/networks/default"
        access_configs:
          - name: External NAT
            type: ONE_TO_ONE_NAT
    tags:
      items:
        - http-server
        - https-server
  register: gcp_instance
  when: true 
- name: Write gcp_instance into json file
  copy:
    content: "{{ gcp_instance }}"
    dest: "./gcp_instance.json"
  when: true 

- name: Show instance details
  debug:
    var: gcp_instance
  when: true 
- name: Update inventory using jinjar template
  template:
    src: ../templates/inventory-template.j2
    dest: ./inventory-v2.ini
  when: true 